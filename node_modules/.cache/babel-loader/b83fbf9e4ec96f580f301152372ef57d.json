{"ast":null,"code":"var _jsxFileName = \"/Users/ngraham/Documents/react-router-swapi/src/components/Films.js\";\nimport React from \"react\";\nimport ReactDOM from 'react-dom';\nimport Loader from 'react-loader-spinner'; //import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nvar c = 0; //film counter\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 0,\n      isOn: false,\n      start: 0\n    };\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n  }\n\n  startTimer() {\n    this.setState({\n      isOn: true,\n      time: this.state.time,\n      start: Date.now() - this.state.time\n    });\n    this.timer = setInterval(() => this.setState({\n      time: Date.now() - this.state.start\n    }), 1);\n  }\n\n  stopTimer() {\n    this.setState({\n      isOn: false\n    });\n    clearInterval(this.timer);\n  }\n\n  resetTimer() {\n    this.setState({\n      time: 0,\n      isOn: false\n    });\n  }\n\n  render() {\n    let start = this.state.time == 0 ? React.createElement(\"button\", {\n      onClick: this.startTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"start\") : null;\n    let stop = this.state.time == 0 || !this.state.isOn ? null : React.createElement(\"button\", {\n      onClick: this.stopTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"stop\");\n    let resume = this.state.time == 0 || this.state.isOn ? null : React.createElement(\"button\", {\n      onClick: this.startTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"resume\");\n    let reset = this.state.time == 0 || this.state.isOn ? null : React.createElement(\"button\", {\n      onClick: this.resetTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"reset\");\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"timer: \", ms(this.state.time)), start, resume, stop, reset);\n  }\n\n}\n\nexport class Films extends React.Component {\n  constructor(props) {\n    super();\n\n    this.fetchSWAPI = () => {\n      fetch(\"https://swapi.co/api/films\").then(results => {\n        return results.json();\n      }).then(data => {\n        // this.setState({pictures:data});\n        console.log(\"howdy\", typeof this.state.pictures);\n        let pictures = data.results.map(pic => {\n          return React.createElement(\"div\", {\n            key: c++,\n            className: \"allFilms\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          }, React.createElement(\"h2\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          }, pic.title), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }, pic.opening_crawl));\n        });\n        this.setState({\n          pictures: pictures\n        }); // console.log(\"state\",this.state);\n        //console.log(\"c is: \" + c);\n\n        /*\n                const items = this.state.pictures.map(function(item){\n                        console.log(item.count);\n                        return <li> {items} </li>;\n                    });\n            });//.catch(function(error) { console.log(error.number + \": \" + error.message);*/\n      });\n    };\n\n    this.state = {\n      pictures: [],\n      loading: true\n    };\n    /*\n        fetch(\"https://swapi.co/api/films\")\n        .then(res => res.json())\n        .then(data => {\n        this.setState({ films: data });\n        })\n        .catch(console.log);*/\n  }\n\n  componentDidMount() {\n    this.fetchSWAPI();\n  }\n\n  render() {\n    //console.log(\"howdy\",this.state.pictures);\n    //   const items = this.state.pictures.map(function(item){\n    //       console.log(item.count);\n    //     return <li> {item} </li>;\n    //   });\n\n    /*\n    this.state.pictures.map((_,columnIndex) => pictures.map(\n    picture => picture[columnIndex])\n    );\n    console.log(this.state.pictures);*/\n    //if (this.state.loading) return <Loader />;\n    return React.createElement(\"div\", {\n      className: \"container1 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      type: \"ThreeDots\",\n      color: \"\",\n      height: 100,\n      width: 200,\n      timeout: 5000,\n      className: \"loaderCon col-lg-1 col-centered\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, this.state.pictures));\n  }\n\n  shouldComponentUpdate() {\n    return true;\n  } //console.log(\"compdidmount\");\n\n  /*\n          var test = Object.keys(this.state).map(function (key) {\n              return <option key={key} value={key}>{this.state[key]}</option>;\n          });*/\n  //}\n\n\n} //ReactDOM.render(<Films />, document.getElementById(\"root\"));\n//ReactDOM.render(<h2>howdy</h2>, document.getElementById(\"root\"));\n//OLD WAYY \n// import React from \"react\";\n// import ReactDOM from 'react-dom';\n// var c = 0; //film counter\n// export class Films extends React.Component {\n//   constructor(props) {\n//     super();\n//     this.state = {\n//         pictures: [],\n//     };\n// /*\n//     fetch(\"https://swapi.co/api/films\")\n//     .then(res => res.json())\n//     .then(data => {\n//       this.setState({ films: data });\n//     })\n//     .catch(console.log);*/\n// }\n// componentDidMount() {\n//   fetch(\"https://swapi.co/api/films\")\n//   .then(results => {\n//       return results.json();\n//   }). then (data => { \n//       let pictures = data.results.map((pic) => {\n//           return (\n//               <div key={c++} className=\"allFilms\">\n//                   <h2>{pic.title}</h2>\n//                   <p>{pic.opening_crawl}</p>\n//               </div>\n//           )\n//       })\n//       this.setState({pictures: pictures});\n//       console.log(\"state\",this.state);\n//       console.log(\"c is: \" + c);\n//   });\n// }\n// render() {\n//    // console.log(\"this is renderrr.... \" + (i++), this.state);\n//   return (\n// <div className=\"container2\">\n//   <div className=\"container1\">\n//       {this.state.pictures}\n//   </div>\n// </div>\n//   );\n//   }\n//   shouldComponentUpdate() {\n//       return true;\n//   }\n// //console.log(\"compdidmount\");\n// /*\n//       var test = Object.keys(this.state).map(function (key) {\n//           return <option key={key} value={key}>{this.state[key]}</option>;\n//       });*/\n// //}\n// }\n// //ReactDOM.render(<Films />, document.getElementById(\"root\"));\n// ReactDOM.render(<h2>howdy</h2>, document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/ngraham/Documents/react-router-swapi/src/components/Films.js"],"names":["React","ReactDOM","Loader","c","Timer","Component","constructor","props","state","time","isOn","start","startTimer","bind","stopTimer","resetTimer","setState","Date","now","timer","setInterval","clearInterval","render","stop","resume","reset","ms","Films","fetchSWAPI","fetch","then","results","json","data","console","log","pictures","map","pic","title","opening_crawl","loading","componentDidMount","shouldComponentUpdate"],"mappings":"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","sourcesContent":["    import React from \"react\";\n    import ReactDOM from 'react-dom';\n    import Loader from 'react-loader-spinner'\n    //import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\n    var c = 0; //film counter\n\nclass Timer extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      time: 0,\n      isOn: false,\n      start: 0\n    }\n    this.startTimer = this.startTimer.bind(this)\n    this.stopTimer = this.stopTimer.bind(this)\n    this.resetTimer = this.resetTimer.bind(this)\n  }\n  startTimer() {\n    this.setState({\n      isOn: true,\n      time: this.state.time,\n      start: Date.now() - this.state.time\n    })\n    this.timer = setInterval(() => this.setState({\n      time: Date.now() - this.state.start\n    }), 1);\n  }\n  stopTimer() {\n    this.setState({isOn: false})\n    clearInterval(this.timer)\n  }\n  resetTimer() {\n    this.setState({time: 0, isOn: false})\n  }\n  render() {\n    let start = (this.state.time == 0) ?\n      <button onClick={this.startTimer}>start</button> :\n      null\n    let stop = (this.state.time == 0 || !this.state.isOn) ?\n      null :\n      <button onClick={this.stopTimer}>stop</button>\n    let resume = (this.state.time == 0 || this.state.isOn) ?\n      null :\n      <button onClick={this.startTimer}>resume</button>\n    let reset = (this.state.time == 0 || this.state.isOn) ?\n      null :\n      <button onClick={this.resetTimer}>reset</button>\n    return(\n      <div>\n        <h3>timer: {ms(this.state.time)}</h3>\n        {start}\n        {resume}\n        {stop}\n        {reset}\n      </div>\n    )\n  }\n}\n\n\n    export class Films extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            pictures: [],\n            loading: true\n        };\n    /*\n        fetch(\"https://swapi.co/api/films\")\n        .then(res => res.json())\n        .then(data => {\n        this.setState({ films: data });\n        })\n        .catch(console.log);*/\n    }\n\n    fetchSWAPI = () => {\n\n        fetch(\"https://swapi.co/api/films\")\n        .then(results => {\n            return results.json();\n        }). then (data => { \n        // this.setState({pictures:data});\n            console.log(\"howdy\",typeof(this.state.pictures));\n\n        let pictures = data.results.map((pic) => {\n                        return (\n                    \n                            <div key={c++} className=\"allFilms\">\n                                <h2>{pic.title}</h2>\n                                <p>{pic.opening_crawl}</p>\n                            </div>\n                            \n                        )\n                    })\n                    this.setState({pictures: pictures}); \n\n        // console.log(\"state\",this.state);\n            //console.log(\"c is: \" + c);\n    /*\n            const items = this.state.pictures.map(function(item){\n                    console.log(item.count);\n                    return <li> {items} </li>;\n                });\n        });//.catch(function(error) { console.log(error.number + \": \" + error.message);*/\n    });\n\n    }\n\n\n    componentDidMount() {\n        this.fetchSWAPI();\n    }\n\n    render() {\n        //console.log(\"howdy\",this.state.pictures);\n        //   const items = this.state.pictures.map(function(item){\n        //       console.log(item.count);\n        //     return <li> {item} </li>;\n        //   });\n        /*\n    this.state.pictures.map((_,columnIndex) => pictures.map(\n        picture => picture[columnIndex])\n    );\n    console.log(this.state.pictures);*/\n\n\n    //if (this.state.loading) return <Loader />;\n        return (\n         <div className=\"container1 \">\n            <div className=\"row\">\n                <Loader\n                        type=\"ThreeDots\"\n                        color=\"\"\n                        height={100}\n                        width={200}\n                        timeout={5000}\n                        className=\"loaderCon col-lg-1 col-centered\"/>\n                    </div>\n            <div className=\"container2\">\n                {this.state.pictures}\n            </div>\n        </div>\n\n        );\n        }\n\n\n        shouldComponentUpdate() {\n            return true;\n        }\n\n    //console.log(\"compdidmount\");\n    /*\n            var test = Object.keys(this.state).map(function (key) {\n                return <option key={key} value={key}>{this.state[key]}</option>;\n            });*/\n\n    //}\n\n\n    }\n\n    //ReactDOM.render(<Films />, document.getElementById(\"root\"));\n    //ReactDOM.render(<h2>howdy</h2>, document.getElementById(\"root\"));\n\n    //OLD WAYY \n\n    // import React from \"react\";\n    // import ReactDOM from 'react-dom';\n\n    // var c = 0; //film counter\n\n    // export class Films extends React.Component {\n    //   constructor(props) {\n    //     super();\n    //     this.state = {\n    //         pictures: [],\n    //     };\n    // /*\n    //     fetch(\"https://swapi.co/api/films\")\n    //     .then(res => res.json())\n    //     .then(data => {\n    //       this.setState({ films: data });\n    //     })\n    //     .catch(console.log);*/\n    // }\n\n    // componentDidMount() {\n    //   fetch(\"https://swapi.co/api/films\")\n    //   .then(results => {\n    //       return results.json();\n    //   }). then (data => { \n    //       let pictures = data.results.map((pic) => {\n    //           return (\n    //               <div key={c++} className=\"allFilms\">\n    //                   <h2>{pic.title}</h2>\n    //                   <p>{pic.opening_crawl}</p>\n    //               </div>\n    //           )\n    //       })\n    //       this.setState({pictures: pictures});\n    //       console.log(\"state\",this.state);\n    //       console.log(\"c is: \" + c);\n    //   });\n    // }\n\n    // render() {\n    //    // console.log(\"this is renderrr.... \" + (i++), this.state);\n    //   return (\n    // <div className=\"container2\">\n    //   <div className=\"container1\">\n    //       {this.state.pictures}\n    //   </div>\n    // </div>\n    //   );\n    //   }\n\n    //   shouldComponentUpdate() {\n    //       return true;\n    //   }\n\n    // //console.log(\"compdidmount\");\n    // /*\n    //       var test = Object.keys(this.state).map(function (key) {\n    //           return <option key={key} value={key}>{this.state[key]}</option>;\n    //       });*/\n\n    // //}\n\n\n    // }\n\n    // //ReactDOM.render(<Films />, document.getElementById(\"root\"));\n    // ReactDOM.render(<h2>howdy</h2>, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}