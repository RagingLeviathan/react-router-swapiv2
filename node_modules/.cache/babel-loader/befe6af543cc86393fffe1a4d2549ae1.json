{"ast":null,"code":"var request = require('request'),\n    util = require('./util');\n\nconst BASE_URL = 'https://swapi.co/api/';\n\nfunction sendRequest(options) {\n  return new Promise((resolve, reject) => {\n    request(options, (error, response, body) => {\n      if (error || response.statusCode > 399) {\n        return reject({\n          error: response.statusCode\n        });\n      }\n\n      var jsonBody;\n\n      try {\n        jsonBody = JSON.parse(body);\n      } catch (e) {\n        return reject({\n          error: 'JSON parse error'\n        });\n      }\n\n      ['nextPage', 'previousPage'].forEach(value => {\n        jsonBody[value] = (() => {\n          return () => {\n            var url = jsonBody[value.indexOf('next') > -1 ? 'next' : 'previous'];\n\n            if (url) {\n              return makeRequest(url);\n            }\n\n            return Promise.resolve(null);\n          };\n        })();\n      });\n      Object.keys(jsonBody).forEach(value => {\n        if (typeof jsonBody[value] !== 'function') {\n          jsonBody['get' + util.capitaliseFirstLetter(value)] = (() => {\n            return () => {\n              if (!Array.isArray(jsonBody[value])) {\n                if (jsonBody[value].indexOf(BASE_URL) > -1) {\n                  return makeRequest(jsonBody[value]);\n                }\n\n                return Promise.resolve(jsonBody[value]);\n              }\n\n              var p = jsonBody[value].map(val => {\n                if (val.indexOf(BASE_URL) > -1) {\n                  return makeRequest(val);\n                }\n\n                return Promise.resolve(val);\n              });\n              return Promise.all(p).then(v => {\n                return v;\n              });\n            };\n          })();\n        }\n      });\n      return resolve(jsonBody);\n    });\n  });\n}\n\nfunction makeRequest(url) {\n  var options = {\n    url: url.indexOf(BASE_URL) > -1 ? url : BASE_URL + url,\n    headers: {\n      'User-Agent': 'swapi-node',\n      'SWAPI-Node-Version': require('../package.json').version\n    }\n  };\n  return sendRequest(options);\n}\n\nfunction parseOptions(options) {\n  var id, opts;\n  opts = options || {};\n\n  if (typeof opts === 'object') {\n    return opts;\n  } else {\n    return {\n      id: opts\n    };\n  }\n}\n\nmodule.exports = {\n  get(url) {\n    return makeRequest(url);\n  },\n\n  getPerson(options) {\n    var opts = parseOptions(options);\n    return makeRequest('people' + (opts.id ? '/' + opts.id : '/'));\n  },\n\n  getStarship(options) {\n    var opts = parseOptions(options);\n    return makeRequest('starships' + (opts.id ? '/' + opts.id : '/'));\n  },\n\n  getVehicle(options) {\n    var opts = parseOptions(options);\n    return makeRequest('vehicles' + (opts.id ? '/' + opts.id : '/'));\n  },\n\n  getFilm(options) {\n    var opts = parseOptions(options);\n    return makeRequest('films' + (opts.id ? '/' + opts.id : '/'));\n  },\n\n  getSpecies(options) {\n    var opts = parseOptions(options);\n    return makeRequest('species' + (opts.id ? '/' + opts.id : '/'));\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}