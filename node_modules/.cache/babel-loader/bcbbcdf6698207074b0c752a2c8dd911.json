{"ast":null,"code":"var _jsxFileName = \"/Users/ngraham/Documents/react-router-swapi/src/components/Films.js\";\nimport React from \"react\";\nimport ReactDOM from 'react-dom';\nimport Loader from 'react-loader-spinner'; //import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nlet c = 0; //film counter\n\nlet heck = 0;\nexport class Films extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchSWAPI = () => {\n      fetch(\"https://swapi.co/api/films\").then(results => {\n        return results.json();\n      }).then(data => {\n        // this.setState({pictures:data});\n        //  console.log(\"howdy\",typeof(this.state.pictures));\n        let pictures = data.results.map(pic => {\n          return React.createElement(\"div\", {\n            key: c++,\n            className: \"allFilms\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41\n            },\n            __self: this\n          }, React.createElement(\"h2\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42\n            },\n            __self: this\n          }, pic.title), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43\n            },\n            __self: this\n          }, pic.opening_crawl));\n        });\n        this.setState({\n          pictures: pictures\n        });\n      }).catch(function (error) {\n        console.log(error.number + \": \" + error.message);\n      });\n    };\n\n    this.state = {\n      pictures: [],\n      loading: true\n    };\n  }\n  /*\n      fetch(\"https://swapi.co/api/films\")\n      .then(res => res.json())\n      .then(data => {\n      this.setState({ films: data });\n      })\n      .catch(console.log);*/\n\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n    this.fetchSWAPI();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    //console.log(\"howdy\",this.state.pictures);\n    //   const items = this.state.pictures.map(function(item){\n    //       console.log(item.count);\n    //     return <li> {item} </li>;\n    //   });\n\n    /*\n    this.state.pictures.map((_,columnIndex) => pictures.map(\n    picture => picture[columnIndex])\n    );\n    console.log(this.state.pictures);*/\n    //if (this.state.loading) return <Loader />;\n    return React.createElement(\"div\", {\n      className: \"container1 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      type: \"ThreeDots\",\n      color: \"\",\n      height: 100,\n      width: 200,\n      timeout: 5000,\n      className: \"loaderCon col-lg-1 col-centered\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"container2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.state.pictures));\n  }\n\n  shouldComponentUpdate() {\n    return true;\n  } //console.log(\"compdidmount\");\n\n  /*\n          var test = Object.keys(this.state).map(function (key) {\n              return <option key={key} value={key}>{this.state[key]}</option>;\n          });*/\n  //}\n\n\n} //ReactDOM.render(<Films />, document.getElementById(\"root\"));\n//ReactDOM.render(<h2>howdy</h2>, document.getElementById(\"root\"));\n//OLD WAYY \n// import React from \"react\";\n// import ReactDOM from 'react-dom';\n// var c = 0; //film counter\n// export class Films extends React.Component {\n//   constructor(props) {\n//     super();\n//     this.state = {\n//         pictures: [],\n//     };\n// /*\n//     fetch(\"https://swapi.co/api/films\")\n//     .then(res => res.json())\n//     .then(data => {\n//       this.setState({ films: data });\n//     })\n//     .catch(console.log);*/\n// }\n// componentDidMount() {\n//   fetch(\"https://swapi.co/api/films\")\n//   .then(results => {\n//       return results.json();\n//   }). then (data => { \n//       let pictures = data.results.map((pic) => {\n//           return (\n//               <div key={c++} className=\"allFilms\">\n//                   <h2>{pic.title}</h2>\n//                   <p>{pic.opening_crawl}</p>\n//               </div>\n//           )\n//       })\n//       this.setState({pictures: pictures});\n//       console.log(\"state\",this.state);\n//       console.log(\"c is: \" + c);\n//   });\n// }\n// render() {\n//    // console.log(\"this is renderrr.... \" + (i++), this.state);\n//   return (\n// <div className=\"container2\">\n//   <div className=\"container1\">\n//       {this.state.pictures}\n//   </div>\n// </div>\n//   );\n//   }\n//   shouldComponentUpdate() {\n//       return true;\n//   }\n// //console.log(\"compdidmount\");\n// /*\n//       var test = Object.keys(this.state).map(function (key) {\n//           return <option key={key} value={key}>{this.state[key]}</option>;\n//       });*/\n// //}\n// }\n// //ReactDOM.render(<Films />, document.getElementById(\"root\"));\n// ReactDOM.render(<h2>howdy</h2>, document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/ngraham/Documents/react-router-swapi/src/components/Films.js"],"names":["React","ReactDOM","Loader","c","heck","Films","Component","constructor","props","fetchSWAPI","fetch","then","results","json","data","pictures","map","pic","title","opening_crawl","setState","catch","error","console","log","number","message","state","loading","componentDidMount","timerID","setInterval","tick","componentWillUnmount","clearInterval","date","Date","render","shouldComponentUpdate"],"mappings":"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","sourcesContent":["    import React from \"react\";\n    import ReactDOM from 'react-dom';\n    import Loader from 'react-loader-spinner'\n    //import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\n    let c = 0; //film counter\n    let heck = 0;\n\n    export class Films extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pictures: [],\n            loading: true,\n        };\n\n  }\n    /*\n        fetch(\"https://swapi.co/api/films\")\n        .then(res => res.json())\n        .then(data => {\n        this.setState({ films: data });\n        })\n        .catch(console.log);*/\n\n\n   \n\n    fetchSWAPI = () => {\n\n        fetch(\"https://swapi.co/api/films\")\n        .then(results => {\n            return results.json();\n        }). then (data => { \n        // this.setState({pictures:data});\n          //  console.log(\"howdy\",typeof(this.state.pictures));\n\n        let pictures = data.results.map((pic) => {\n                        return (\n                    \n                            <div key={c++} className=\"allFilms\">\n                                <h2>{pic.title}</h2>\n                                <p>{pic.opening_crawl}</p>\n                            </div>\n                            \n                        )\n                    })\n                    this.setState({pictures: pictures}); \n    }).catch(function(error) { console.log(error.number + \": \" + error.message); });\n\n    }\n\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n          );\n        this.fetchSWAPI();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n      }\n    \n      tick() {\n        this.setState({\n          date: new Date()\n        });\n      }\n\n    render() {\n        //console.log(\"howdy\",this.state.pictures);\n        //   const items = this.state.pictures.map(function(item){\n        //       console.log(item.count);\n        //     return <li> {item} </li>;\n        //   });\n        /*\n    this.state.pictures.map((_,columnIndex) => pictures.map(\n        picture => picture[columnIndex])\n    );\n    console.log(this.state.pictures);*/\n\n\n    //if (this.state.loading) return <Loader />;\n\n \n\n        return (\n         <div className=\"container1 \">\n            <div className=\"row\">\n                <Loader\n                        type=\"ThreeDots\"\n                        color=\"\"\n                        height={100}\n                        width={200}\n                        timeout={5000}\n                        className=\"loaderCon col-lg-1 col-centered\"/>\n                    </div>\n                    \n            <div className=\"container2\">\n                \n                {this.state.pictures}\n            </div>\n        </div>\n\n        );\n        }\n\n\n        shouldComponentUpdate() {\n            return true;\n        }\n\n    //console.log(\"compdidmount\");\n    /*\n            var test = Object.keys(this.state).map(function (key) {\n                return <option key={key} value={key}>{this.state[key]}</option>;\n            });*/\n\n    //}\n\n\n    }\n\n    //ReactDOM.render(<Films />, document.getElementById(\"root\"));\n    //ReactDOM.render(<h2>howdy</h2>, document.getElementById(\"root\"));\n\n    //OLD WAYY \n\n    // import React from \"react\";\n    // import ReactDOM from 'react-dom';\n\n    // var c = 0; //film counter\n\n    // export class Films extends React.Component {\n    //   constructor(props) {\n    //     super();\n    //     this.state = {\n    //         pictures: [],\n    //     };\n    // /*\n    //     fetch(\"https://swapi.co/api/films\")\n    //     .then(res => res.json())\n    //     .then(data => {\n    //       this.setState({ films: data });\n    //     })\n    //     .catch(console.log);*/\n    // }\n\n    // componentDidMount() {\n    //   fetch(\"https://swapi.co/api/films\")\n    //   .then(results => {\n    //       return results.json();\n    //   }). then (data => { \n    //       let pictures = data.results.map((pic) => {\n    //           return (\n    //               <div key={c++} className=\"allFilms\">\n    //                   <h2>{pic.title}</h2>\n    //                   <p>{pic.opening_crawl}</p>\n    //               </div>\n    //           )\n    //       })\n    //       this.setState({pictures: pictures});\n    //       console.log(\"state\",this.state);\n    //       console.log(\"c is: \" + c);\n    //   });\n    // }\n\n    // render() {\n    //    // console.log(\"this is renderrr.... \" + (i++), this.state);\n    //   return (\n    // <div className=\"container2\">\n    //   <div className=\"container1\">\n    //       {this.state.pictures}\n    //   </div>\n    // </div>\n    //   );\n    //   }\n\n    //   shouldComponentUpdate() {\n    //       return true;\n    //   }\n\n    // //console.log(\"compdidmount\");\n    // /*\n    //       var test = Object.keys(this.state).map(function (key) {\n    //           return <option key={key} value={key}>{this.state[key]}</option>;\n    //       });*/\n\n    // //}\n\n\n    // }\n\n    // //ReactDOM.render(<Films />, document.getElementById(\"root\"));\n    // ReactDOM.render(<h2>howdy</h2>, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}